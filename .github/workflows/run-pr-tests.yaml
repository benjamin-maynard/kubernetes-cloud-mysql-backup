name: Run tests on a PR
on:
  workflow_dispatch:
    inputs:
      prID:
        description: 'The ID of the Pull Request to test'
        required: true
jobs:
  test-pr:
    runs-on: ubuntu-18.04
    steps:
      -
        name: Get PR Info for Tests
        id: get-pr-info
        run: |
          PRINFO=$(curl -H "Accept: application/vnd.github.v3+json"   https://api.github.com/repos/benjamin-maynard/kubernetes-cloud-mysql-backup/pulls/${{ github.event.inputs.prID }})
          PRHEAD=$(echo $PRINFO | jq -r .head.repo.full_name)
          PRSHA=$(echo $PRINFO | jq -r .head.sha)
          echo "::set-output name=PRHEAD::$PRHEAD"
          echo "::set-output name=PRSHA::$PRSHA"
      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          repository: ${{ steps.get-pr-info.outputs.PRHEAD }}
          ref: ${{ steps.get-pr-info.outputs.PRSHA }}
      -
        name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: maynard-io-public
          service_account_key: ${{ secrets.GCP_SA }}
          export_default_credentials: true
      -
        name: Install awscli
        working-directory: /tmp
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          mkdir -p ~/.aws
          echo "[default]" >> ~/.aws/credentials
          echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ secrets.AWS_SECRET_KEY }}" >> ~/.aws/credentials
          echo "[default]" >> ~/.aws/config
          echo "region = eu-west-1" >> ~/.aws/config
      -
        name: Install Age Encryption
        working-directory: /tmp
        run: |
          git clone https://filippo.io/age
          cd age
          git checkout 552aa0a07de0b42c16126d3107bd8895184a69e7
          go build -o . filippo.io/age/cmd/...
          sudo cp age /usr/local/bin/
      -
        name: Build kubernetes-cloud-mysql-backup, pull mysql and setup Docker
        run: |
          # Build Container Locally for testing
          echo "Building kubernetes-cloud-mysql-backup..."
          docker build -t kubernetes-cloud-mysql-backup:test .
          # Pull MySQL
          echo "Pulling mysql:5.7.32..."
          docker pull mysql:5.7.32
          # Create Docker Network
          echo "Creating Docker network..."
          docker network create --driver bridge backup-net
      -
        name: Setup Test Database
        run: |
          # Start MySQL Database
          echo "Starting MySQL Container..."
          docker run --name db-server -p 3306 --network backup-net -e MYSQL_ROOT_PASSWORD=letmein -d mysql:5.7.32
          # Wait for MySQL to Start. The MySQL container takes a long time to start
          echo "Waiting for MySQL Container to start..."
          sleep 90
          # Import Test DB
          echo "Importing test DB..."
          docker exec -i db-server mysql -u root -pletmein < tests/db/world.sql
      -
        name: Test GCP Standard Backup
        run: |
          # Perform database backup
          echo "Performing database backup..."
          docker run -e GCP_GCLOUD_AUTH=${{ secrets.GCP_SA }} -e GCP_BUCKET_BACKUP_PATH="/${{ github.sha }}" --env-file tests/configs/gcp.env --network backup-net kubernetes-cloud-mysql-backup:test
          # Fetch backup file from GCS
          echo "Fetching database backup..."
          gsutil cp gs://kubernetes-cloud-mysql-backup-github-testing/${{ github.sha }}/world.sql /tmp/world.sql
          # Strip the "Dump Completed on" line
          echo "Stripping Dump Completed On line from downloaded backup..."
          sed -i '/-- Dump completed on/d' /tmp/world.sql
          # Strip the "MariaDB dump" line
          echo "Stripping MariaDB dump line from downloaded backup..."
          sed -i '/-- MariaDB dump/d' /tmp/world.sql
          # Compare the database backups, diff will exit with 1 if the files do not match causing the workflow to fail
          echo "Comparing database backup to known good database..."
          diff tests/db/world.sql /tmp/world.sql
          # Remove /tmp/world.sql
          echo "Removing /tmp/world.sql"
          rm /tmp/world.sql
      -
        name: Test GCP Standard All Databases Backup
        run: |
          # Perform database backup
          echo "Performing database backup..."
          docker run -e GCP_GCLOUD_AUTH=${{ secrets.GCP_SA }} -e GCP_BUCKET_BACKUP_PATH="/${{ github.sha }}/dumpall" -e TARGET_ALL_DATABASES="true" --env-file tests/configs/gcp.env --network backup-net kubernetes-cloud-mysql-backup:test
          # Fetch backup file from GCS
          echo "Fetching database backup..."
          gsutil cp gs://kubernetes-cloud-mysql-backup-github-testing/${{ github.sha }}/dumpall/world.sql /tmp/world.sql
          # Strip the "Dump Completed on" line
          echo "Stripping Dump Completed On line from downloaded backup..."
          sed -i '/-- Dump completed on/d' /tmp/world.sql
          # Strip the "MariaDB dump" line
          echo "Stripping MariaDB dump line from downloaded backup..."
          sed -i '/-- MariaDB dump/d' /tmp/world.sql
          # Compare the database backups, diff will exit with 1 if the files do not match causing the workflow to fail
          echo "Comparing database backup to known good database..."
          diff tests/db/world.sql /tmp/world.sql
          # Remove /tmp/world.sql
          echo "Removing /tmp/world.sql"
          rm /tmp/world.sql
      -
        name: Test GCP Compressed Backup
        run: |
          # Perform database backup
          echo "Performing database backup..."
          docker run -e GCP_GCLOUD_AUTH=${{ secrets.GCP_SA }} -e GCP_BUCKET_BACKUP_PATH="/${{ github.sha }}" --env-file tests/configs/gcp.env -e BACKUP_COMPRESS=true --network backup-net kubernetes-cloud-mysql-backup:test
          # Fetch backup file from GCS
          echo "Fetching database backup..."
          gsutil cp gs://kubernetes-cloud-mysql-backup-github-testing/${{ github.sha }}/world.sql.gz /tmp/world.sql.gz
          # gunzip backup
          echo "Extracting backup"
          gunzip /tmp/world.sql.gz
          # Strip the "Dump Completed on" line
          echo "Stripping Dump Completed On line from downloaded backup..."
          sed -i '/-- Dump completed on/d' /tmp/world.sql
          # Strip the "MariaDB dump" line
          echo "Stripping MariaDB dump line from downloaded backup..."
          sed -i '/-- MariaDB dump/d' /tmp/world.sql
          # Compare the database backups, diff will exit with 1 if the files do not match causing the workflow to fail
          echo "Comparing database backup to known good database..."
          diff tests/db/world.sql /tmp/world.sql
          # Remove /tmp/world.sql
          echo "Removing /tmp/world.sql"
          rm /tmp/world.sql
      -
        name: Test GCP Encrypted Backup
        run: |
          # Perform database backup
          echo "Performing database backup..."
          docker run -e GCP_GCLOUD_AUTH=${{ secrets.GCP_SA }} -e GCP_BUCKET_BACKUP_PATH="/${{ github.sha }}" --env-file tests/configs/gcp.env -e AGE_PUBLIC_KEY="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCezY3II94FtFhJfC7wc7tNQkR9c+XN6AUNhR269f5xBCe0RZTAHt+jpHnc2auePvz+3G34cOTF7lLrgioff/yv+K6hMItKg0OdiqGQ5gKBwzUOom3TgZ1Cht7vnAVejsWfbd7RBTIeDYUnoNiHf9dt8CJIaLaanDnjzLOLQcf7KPlZUbk6TexC1QpL6X8ir9tl7ao8v+QSgGtigO2QwF7QdSZSd/xlv0FsQKfgD25fIQRZEvcyiUnLYAK1wmziICORnW0fp/sL84E8Pj8GvbQK6AGuZn/s27oYmIdCTrwnR68Jvn6l8ST+QrwexzRM/k0yGkRMOU9AiG0o4skEdtGF3yzmC4PSwRys/Ygdy2jmrDaSJSPxpT/gvB5I2UbX2ZCHJ6/H6jNXP71aPI5Ib/eIjWuAyYPRPDvlDOenNN9s7UTD5P1wLoyxx2pnatMHAHu89+1GfdRPglvgUH6y5DYTjc0WZKTqTbeR+DzNoBNRc8exsgo9Y1NWsJn3tyL6vI0= benmaynard@Benjamins-MacBook-Pro.local" --network backup-net kubernetes-cloud-mysql-backup:test
          # Fetch backup file from GCS
          echo "Fetching database backup..."
          gsutil cp gs://kubernetes-cloud-mysql-backup-github-testing/${{ github.sha }}/world.sql.age /tmp/world.sql.age
          # Decrypt backup
          echo "Decrypt backup"
          age --decrypt -i tests/keys/priv /tmp/world.sql.age > /tmp/world.sql
          # Strip the "Dump Completed on" line
          echo "Stripping Dump Completed On line from downloaded backup..."
          sed -i '/-- Dump completed on/d' /tmp/world.sql
          # Strip the "MariaDB dump" line
          echo "Stripping MariaDB dump line from downloaded backup..."
          sed -i '/-- MariaDB dump/d' /tmp/world.sql
          # Compare the database backups, diff will exit with 1 if the files do not match causing the workflow to fail
          echo "Comparing database backup to known good database..."
          diff tests/db/world.sql /tmp/world.sql
          # Remove /tmp/world.sql and .age
          echo "Removing /tmp/world.sql and /tmp/world.sql.age"
          rm /tmp/world.sql
          rm /tmp/world.sql.age
      -
        name: Test GCP Backup with Timestamp
        run: |
          # Perform database backup
          echo "Performing database backup..."
          docker run -e GCP_GCLOUD_AUTH=${{ secrets.GCP_SA }} -e GCP_BUCKET_BACKUP_PATH="/${{ github.sha }}" --env-file tests/configs/gcp.env -e BACKUP_TIMESTAMP="_%Y_%m_%d" --network backup-net kubernetes-cloud-mysql-backup:test
          # Fetch backup file from GCS
          DATE_STRING=$(date +_%Y_%m_%d)
          echo "Fetching database backup..."
          gsutil cp gs://kubernetes-cloud-mysql-backup-github-testing/${{ github.sha }}/world$DATE_STRING.sql /tmp/world.sql
          # Strip the "Dump Completed on" line
          echo "Stripping Dump Completed On line from downloaded backup..."
          sed -i '/-- Dump completed on/d' /tmp/world.sql
          # Strip the "MariaDB dump" line
          echo "Stripping MariaDB dump line from downloaded backup..."
          sed -i '/-- MariaDB dump/d' /tmp/world.sql
          # Compare the database backups, diff will exit with 1 if the files do not match causing the workflow to fail
          echo "Comparing database backup to known good database..."
          diff tests/db/world.sql /tmp/world.sql
          # Remove /tmp/world.sql
          echo "Removing /tmp/world.sql"
          rm /tmp/world.sql
      -
        name: Test GCP Compressed Backup with Timestamp
        run: |
          # Perform database backup
          echo "Performing database backup..."
          docker run -e GCP_GCLOUD_AUTH=${{ secrets.GCP_SA }} -e GCP_BUCKET_BACKUP_PATH="/${{ github.sha }}" --env-file tests/configs/gcp.env -e BACKUP_TIMESTAMP="_%Y_%m_%d" -e BACKUP_COMPRESS=true --network backup-net kubernetes-cloud-mysql-backup:test
          # Fetch backup file from GCS
          DATE_STRING=$(date +_%Y_%m_%d)
          echo "Fetching database backup..."
          gsutil cp gs://kubernetes-cloud-mysql-backup-github-testing/${{ github.sha }}/world$DATE_STRING.sql.gz /tmp/world.sql.gz
          # gunzip backup
          echo "Extracting backup"
          gunzip /tmp/world.sql.gz
          # Strip the "Dump Completed on" line
          echo "Stripping Dump Completed On line from downloaded backup..."
          sed -i '/-- Dump completed on/d' /tmp/world.sql
          # Strip the "MariaDB dump" line
          echo "Stripping MariaDB dump line from downloaded backup..."
          sed -i '/-- MariaDB dump/d' /tmp/world.sql
          # Compare the database backups, diff will exit with 1 if the files do not match causing the workflow to fail
          echo "Comparing database backup to known good database..."
          diff tests/db/world.sql /tmp/world.sql
          # Remove /tmp/world.sql
          echo "Removing /tmp/world.sql"
          rm /tmp/world.sql
      -
        name: Test GCP Compressed and Encrypted Backup
        run: |
          # Perform database backup
          echo "Performing database backup..."
          docker run -e GCP_GCLOUD_AUTH=${{ secrets.GCP_SA }} -e GCP_BUCKET_BACKUP_PATH="/${{ github.sha }}" --env-file tests/configs/gcp.env -e BACKUP_COMPRESS=true -e AGE_PUBLIC_KEY="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCezY3II94FtFhJfC7wc7tNQkR9c+XN6AUNhR269f5xBCe0RZTAHt+jpHnc2auePvz+3G34cOTF7lLrgioff/yv+K6hMItKg0OdiqGQ5gKBwzUOom3TgZ1Cht7vnAVejsWfbd7RBTIeDYUnoNiHf9dt8CJIaLaanDnjzLOLQcf7KPlZUbk6TexC1QpL6X8ir9tl7ao8v+QSgGtigO2QwF7QdSZSd/xlv0FsQKfgD25fIQRZEvcyiUnLYAK1wmziICORnW0fp/sL84E8Pj8GvbQK6AGuZn/s27oYmIdCTrwnR68Jvn6l8ST+QrwexzRM/k0yGkRMOU9AiG0o4skEdtGF3yzmC4PSwRys/Ygdy2jmrDaSJSPxpT/gvB5I2UbX2ZCHJ6/H6jNXP71aPI5Ib/eIjWuAyYPRPDvlDOenNN9s7UTD5P1wLoyxx2pnatMHAHu89+1GfdRPglvgUH6y5DYTjc0WZKTqTbeR+DzNoBNRc8exsgo9Y1NWsJn3tyL6vI0= benmaynard@Benjamins-MacBook-Pro.local" --network backup-net kubernetes-cloud-mysql-backup:test
          # Fetch backup file from GCS
          echo "Fetching database backup..."
          gsutil cp gs://kubernetes-cloud-mysql-backup-github-testing/${{ github.sha }}/world.sql.gz.age /tmp/world.sql.gz.age
          # Decrypt backup
          echo "Decrypt backup"
          age --decrypt -i tests/keys/priv /tmp/world.sql.gz.age > /tmp/world.sql.gz
          # gunzip backup
          echo "Extracting backup"
          gunzip /tmp/world.sql.gz
          # Strip the "Dump Completed on" line
          echo "Stripping Dump Completed On line from downloaded backup..."
          sed -i '/-- Dump completed on/d' /tmp/world.sql
          # Strip the "MariaDB dump" line
          echo "Stripping MariaDB dump line from downloaded backup..."
          sed -i '/-- MariaDB dump/d' /tmp/world.sql
          # Compare the database backups, diff will exit with 1 if the files do not match causing the workflow to fail
          echo "Comparing database backup to known good database..."
          diff tests/db/world.sql /tmp/world.sql
          # Remove /tmp/world.sql and .age
          echo "Removing /tmp/world.sql and /tmp/world.sql.gz.age"
          rm /tmp/world.sql
          rm /tmp/world.sql.gz.age
      -
        name: Test GCP Compressed and Encrypted Backup with Timestamp
        run: |
          # Perform database backup
          echo "Performing database backup..."
          docker run -e GCP_GCLOUD_AUTH=${{ secrets.GCP_SA }} -e GCP_BUCKET_BACKUP_PATH="/${{ github.sha }}" --env-file tests/configs/gcp.env -e BACKUP_COMPRESS=true -e AGE_PUBLIC_KEY="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCezY3II94FtFhJfC7wc7tNQkR9c+XN6AUNhR269f5xBCe0RZTAHt+jpHnc2auePvz+3G34cOTF7lLrgioff/yv+K6hMItKg0OdiqGQ5gKBwzUOom3TgZ1Cht7vnAVejsWfbd7RBTIeDYUnoNiHf9dt8CJIaLaanDnjzLOLQcf7KPlZUbk6TexC1QpL6X8ir9tl7ao8v+QSgGtigO2QwF7QdSZSd/xlv0FsQKfgD25fIQRZEvcyiUnLYAK1wmziICORnW0fp/sL84E8Pj8GvbQK6AGuZn/s27oYmIdCTrwnR68Jvn6l8ST+QrwexzRM/k0yGkRMOU9AiG0o4skEdtGF3yzmC4PSwRys/Ygdy2jmrDaSJSPxpT/gvB5I2UbX2ZCHJ6/H6jNXP71aPI5Ib/eIjWuAyYPRPDvlDOenNN9s7UTD5P1wLoyxx2pnatMHAHu89+1GfdRPglvgUH6y5DYTjc0WZKTqTbeR+DzNoBNRc8exsgo9Y1NWsJn3tyL6vI0= benmaynard@Benjamins-MacBook-Pro.local" -e BACKUP_TIMESTAMP="_%Y_%m_%d" --network backup-net kubernetes-cloud-mysql-backup:test
          # Fetch backup file from GCS
          echo "Fetching database backup..."
          DATE_STRING=$(date +_%Y_%m_%d)
          gsutil cp gs://kubernetes-cloud-mysql-backup-github-testing/${{ github.sha }}/world$DATE_STRING.sql.gz.age /tmp/world.sql.gz.age
          # Decrypt backup
          echo "Decrypt backup"
          age --decrypt -i tests/keys/priv /tmp/world.sql.gz.age > /tmp/world.sql.gz
          # gunzip backup
          echo "Extracting backup"
          gunzip /tmp/world.sql.gz
          # Strip the "Dump Completed on" line
          echo "Stripping Dump Completed On line from downloaded backup..."
          sed -i '/-- Dump completed on/d' /tmp/world.sql
          # Strip the "MariaDB dump" line
          echo "Stripping MariaDB dump line from downloaded backup..."
          sed -i '/-- MariaDB dump/d' /tmp/world.sql
          # Compare the database backups, diff will exit with 1 if the files do not match causing the workflow to fail
          echo "Comparing database backup to known good database..."
          diff tests/db/world.sql /tmp/world.sql
          # Remove /tmp/world.sql
          echo "Removing /tmp/world.sql and /tmp/world.sql.gz.age"
          rm /tmp/world.sql
          rm /tmp/world.sql.gz.age
      -
        name: Test GCP Encrypted Backup with Timestamp
        run: |
          # Perform database backup
          echo "Performing database backup..."
          docker run -e GCP_GCLOUD_AUTH=${{ secrets.GCP_SA }} -e GCP_BUCKET_BACKUP_PATH="/${{ github.sha }}" --env-file tests/configs/gcp.env -e AGE_PUBLIC_KEY="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCezY3II94FtFhJfC7wc7tNQkR9c+XN6AUNhR269f5xBCe0RZTAHt+jpHnc2auePvz+3G34cOTF7lLrgioff/yv+K6hMItKg0OdiqGQ5gKBwzUOom3TgZ1Cht7vnAVejsWfbd7RBTIeDYUnoNiHf9dt8CJIaLaanDnjzLOLQcf7KPlZUbk6TexC1QpL6X8ir9tl7ao8v+QSgGtigO2QwF7QdSZSd/xlv0FsQKfgD25fIQRZEvcyiUnLYAK1wmziICORnW0fp/sL84E8Pj8GvbQK6AGuZn/s27oYmIdCTrwnR68Jvn6l8ST+QrwexzRM/k0yGkRMOU9AiG0o4skEdtGF3yzmC4PSwRys/Ygdy2jmrDaSJSPxpT/gvB5I2UbX2ZCHJ6/H6jNXP71aPI5Ib/eIjWuAyYPRPDvlDOenNN9s7UTD5P1wLoyxx2pnatMHAHu89+1GfdRPglvgUH6y5DYTjc0WZKTqTbeR+DzNoBNRc8exsgo9Y1NWsJn3tyL6vI0= benmaynard@Benjamins-MacBook-Pro.local" -e BACKUP_TIMESTAMP="_%Y_%m_%d" --network backup-net kubernetes-cloud-mysql-backup:test
          # Fetch backup file from GCS
          echo "Fetching database backup..."
          DATE_STRING=$(date +_%Y_%m_%d)
          gsutil cp gs://kubernetes-cloud-mysql-backup-github-testing/${{ github.sha }}/world$DATE_STRING.sql.age /tmp/world.sql.age
          # Decrypt backup
          echo "Decrypt backup"
          age --decrypt -i tests/keys/priv /tmp/world.sql.age > /tmp/world.sql
          # Strip the "Dump Completed on" line
          echo "Stripping Dump Completed On line from downloaded backup..."
          sed -i '/-- Dump completed on/d' /tmp/world.sql
          # Strip the "MariaDB dump" line
          echo "Stripping MariaDB dump line from downloaded backup..."
          sed -i '/-- MariaDB dump/d' /tmp/world.sql
          # Compare the database backups, diff will exit with 1 if the files do not match causing the workflow to fail
          echo "Comparing database backup to known good database..."
          diff tests/db/world.sql /tmp/world.sql
          # Remove /tmp/world.sql and .age
          echo "Removing /tmp/world.sql and /tmp/world.sql.age"
          rm /tmp/world.sql
          rm /tmp/world.sql.age
      -
        name: Test AWS Standard Backup
        run: |
          # Perform database backup
          echo "Performing database backup..."
          docker run -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY }} -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_KEY }} -e AWS_BUCKET_BACKUP_PATH="/${{ github.sha }}" --env-file tests/configs/aws.env --network backup-net kubernetes-cloud-mysql-backup:test
          # Fetch backup file from GCS
          echo "Fetching database backup..."
          aws s3 cp s3://kubernetes-cloud-mysql-backup-github-testing/${{ github.sha }}/world.sql /tmp/world.sql
          # Strip the "Dump Completed on" line
          echo "Stripping Dump Completed On line from downloaded backup..."
          sed -i '/-- Dump completed on/d' /tmp/world.sql
          # Strip the "MariaDB dump" line
          echo "Stripping MariaDB dump line from downloaded backup..."
          sed -i '/-- MariaDB dump/d' /tmp/world.sql
          # Compare the database backups, diff will exit with 1 if the files do not match causing the workflow to fail
          echo "Comparing database backup to known good database..."
          diff tests/db/world.sql /tmp/world.sql
          # Remove /tmp/world.sql
          echo "Removing /tmp/world.sql"
          rm /tmp/world.sql
      -
        name: Test AWS Standard All Databases Backup
        run: |
          # Perform database backup
          echo "Performing database backup..."
          docker run -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY }} -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_KEY }} -e AWS_BUCKET_BACKUP_PATH="/${{ github.sha }}/dumpall" -e TARGET_ALL_DATABASES="true" --env-file tests/configs/aws.env --network backup-net kubernetes-cloud-mysql-backup:test
          # Fetch backup file from GCS
          echo "Fetching database backup..."
          aws s3 cp s3://kubernetes-cloud-mysql-backup-github-testing/${{ github.sha }}/dumpall/world.sql /tmp/world.sql
          # Strip the "Dump Completed on" line
          echo "Stripping Dump Completed On line from downloaded backup..."
          sed -i '/-- Dump completed on/d' /tmp/world.sql
          # Strip the "MariaDB dump" line
          echo "Stripping MariaDB dump line from downloaded backup..."
          sed -i '/-- MariaDB dump/d' /tmp/world.sql
          # Compare the database backups, diff will exit with 1 if the files do not match causing the workflow to fail
          echo "Comparing database backup to known good database..."
          diff tests/db/world.sql /tmp/world.sql
          # Remove /tmp/world.sql
          echo "Removing /tmp/world.sql"
          rm /tmp/world.sql
      -
        name: Test AWS Compressed Backup
        run: |
          # Perform database backup
          echo "Performing database backup..."
          docker run -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY }} -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_KEY }} -e AWS_BUCKET_BACKUP_PATH="/${{ github.sha }}" --env-file tests/configs/aws.env -e BACKUP_COMPRESS=true --network backup-net kubernetes-cloud-mysql-backup:test
          # Fetch backup file from GCS
          echo "Fetching database backup..."
          aws s3 cp s3://kubernetes-cloud-mysql-backup-github-testing/${{ github.sha }}/world.sql.gz /tmp/world.sql.gz
          # gunzip backup
          echo "Extracting backup"
          gunzip /tmp/world.sql.gz
          # Strip the "Dump Completed on" line
          echo "Stripping Dump Completed On line from downloaded backup..."
          sed -i '/-- Dump completed on/d' /tmp/world.sql
          # Strip the "MariaDB dump" line
          echo "Stripping MariaDB dump line from downloaded backup..."
          sed -i '/-- MariaDB dump/d' /tmp/world.sql
          # Compare the database backups, diff will exit with 1 if the files do not match causing the workflow to fail
          echo "Comparing database backup to known good database..."
          diff tests/db/world.sql /tmp/world.sql
          # Remove /tmp/world.sql
          echo "Removing /tmp/world.sql"
          rm /tmp/world.sql
      -
        name: Test AWS Encrypted Backup
        run: |
          # Perform database backup
          echo "Performing database backup..."
          docker run -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY }} -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_KEY }} -e AWS_BUCKET_BACKUP_PATH="/${{ github.sha }}" --env-file tests/configs/aws.env -e AGE_PUBLIC_KEY="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCezY3II94FtFhJfC7wc7tNQkR9c+XN6AUNhR269f5xBCe0RZTAHt+jpHnc2auePvz+3G34cOTF7lLrgioff/yv+K6hMItKg0OdiqGQ5gKBwzUOom3TgZ1Cht7vnAVejsWfbd7RBTIeDYUnoNiHf9dt8CJIaLaanDnjzLOLQcf7KPlZUbk6TexC1QpL6X8ir9tl7ao8v+QSgGtigO2QwF7QdSZSd/xlv0FsQKfgD25fIQRZEvcyiUnLYAK1wmziICORnW0fp/sL84E8Pj8GvbQK6AGuZn/s27oYmIdCTrwnR68Jvn6l8ST+QrwexzRM/k0yGkRMOU9AiG0o4skEdtGF3yzmC4PSwRys/Ygdy2jmrDaSJSPxpT/gvB5I2UbX2ZCHJ6/H6jNXP71aPI5Ib/eIjWuAyYPRPDvlDOenNN9s7UTD5P1wLoyxx2pnatMHAHu89+1GfdRPglvgUH6y5DYTjc0WZKTqTbeR+DzNoBNRc8exsgo9Y1NWsJn3tyL6vI0= benmaynard@Benjamins-MacBook-Pro.local" --network backup-net kubernetes-cloud-mysql-backup:test
          # Fetch backup file from GCS
          echo "Fetching database backup..."
          aws s3 cp s3://kubernetes-cloud-mysql-backup-github-testing/${{ github.sha }}/world.sql.age /tmp/world.sql.age
          # Decrypt backup
          echo "Decrypt backup"
          age --decrypt -i tests/keys/priv /tmp/world.sql.age > /tmp/world.sql
          # Strip the "Dump Completed on" line
          echo "Stripping Dump Completed On line from downloaded backup..."
          sed -i '/-- Dump completed on/d' /tmp/world.sql
          # Strip the "MariaDB dump" line
          echo "Stripping MariaDB dump line from downloaded backup..."
          sed -i '/-- MariaDB dump/d' /tmp/world.sql
          # Compare the database backups, diff will exit with 1 if the files do not match causing the workflow to fail
          echo "Comparing database backup to known good database..."
          diff tests/db/world.sql /tmp/world.sql
          # Remove /tmp/world.sql and .age
          echo "Removing /tmp/world.sql and /tmp/world.sql.age"
          rm /tmp/world.sql
          rm /tmp/world.sql.age
      -
        name: Test AWS Backup with Timestamp
        run: |
          # Perform database backup
          echo "Performing database backup..."
          docker run -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY }} -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_KEY }} -e AWS_BUCKET_BACKUP_PATH="/${{ github.sha }}" --env-file tests/configs/aws.env -e BACKUP_TIMESTAMP="_%Y_%m_%d" --network backup-net kubernetes-cloud-mysql-backup:test
          # Fetch backup file from GCS
          DATE_STRING=$(date +_%Y_%m_%d)
          echo "Fetching database backup..."
          aws s3 cp s3://kubernetes-cloud-mysql-backup-github-testing/${{ github.sha }}/world$DATE_STRING.sql /tmp/world.sql
          # Strip the "Dump Completed on" line
          echo "Stripping Dump Completed On line from downloaded backup..."
          sed -i '/-- Dump completed on/d' /tmp/world.sql
          # Strip the "MariaDB dump" line
          echo "Stripping MariaDB dump line from downloaded backup..."
          sed -i '/-- MariaDB dump/d' /tmp/world.sql
          # Compare the database backups, diff will exit with 1 if the files do not match causing the workflow to fail
          echo "Comparing database backup to known good database..."
          diff tests/db/world.sql /tmp/world.sql
          # Remove /tmp/world.sql
          echo "Removing /tmp/world.sql"
          rm /tmp/world.sql
      -
        name: Test AWS Compressed Backup with Timestamp
        run: |
          # Perform database backup
          echo "Performing database backup..."
          docker run -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY }} -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_KEY }} -e AWS_BUCKET_BACKUP_PATH="/${{ github.sha }}" --env-file tests/configs/aws.env -e BACKUP_TIMESTAMP="_%Y_%m_%d" -e BACKUP_COMPRESS=true --network backup-net kubernetes-cloud-mysql-backup:test
          # Fetch backup file from GCS
          DATE_STRING=$(date +_%Y_%m_%d)
          echo "Fetching database backup..."
          aws s3 cp s3://kubernetes-cloud-mysql-backup-github-testing/${{ github.sha }}/world$DATE_STRING.sql.gz /tmp/world.sql.gz
          # gunzip backup
          echo "Extracting backup"
          gunzip /tmp/world.sql.gz
          # Strip the "Dump Completed on" line
          echo "Stripping Dump Completed On line from downloaded backup..."
          sed -i '/-- Dump completed on/d' /tmp/world.sql
          # Strip the "MariaDB dump" line
          echo "Stripping MariaDB dump line from downloaded backup..."
          sed -i '/-- MariaDB dump/d' /tmp/world.sql
          # Compare the database backups, diff will exit with 1 if the files do not match causing the workflow to fail
          echo "Comparing database backup to known good database..."
          diff tests/db/world.sql /tmp/world.sql
          # Remove /tmp/world.sql
          echo "Removing /tmp/world.sql"
          rm /tmp/world.sql
      -
        name: Test AWS Compressed and Encrypted Backup
        run: |
          # Perform database backup
          echo "Performing database backup..."
          docker run -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY }} -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_KEY }} -e AWS_BUCKET_BACKUP_PATH="/${{ github.sha }}" --env-file tests/configs/aws.env -e BACKUP_COMPRESS=true -e AGE_PUBLIC_KEY="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCezY3II94FtFhJfC7wc7tNQkR9c+XN6AUNhR269f5xBCe0RZTAHt+jpHnc2auePvz+3G34cOTF7lLrgioff/yv+K6hMItKg0OdiqGQ5gKBwzUOom3TgZ1Cht7vnAVejsWfbd7RBTIeDYUnoNiHf9dt8CJIaLaanDnjzLOLQcf7KPlZUbk6TexC1QpL6X8ir9tl7ao8v+QSgGtigO2QwF7QdSZSd/xlv0FsQKfgD25fIQRZEvcyiUnLYAK1wmziICORnW0fp/sL84E8Pj8GvbQK6AGuZn/s27oYmIdCTrwnR68Jvn6l8ST+QrwexzRM/k0yGkRMOU9AiG0o4skEdtGF3yzmC4PSwRys/Ygdy2jmrDaSJSPxpT/gvB5I2UbX2ZCHJ6/H6jNXP71aPI5Ib/eIjWuAyYPRPDvlDOenNN9s7UTD5P1wLoyxx2pnatMHAHu89+1GfdRPglvgUH6y5DYTjc0WZKTqTbeR+DzNoBNRc8exsgo9Y1NWsJn3tyL6vI0= benmaynard@Benjamins-MacBook-Pro.local" --network backup-net kubernetes-cloud-mysql-backup:test
          # Fetch backup file from GCS
          echo "Fetching database backup..."
          aws s3 cp s3://kubernetes-cloud-mysql-backup-github-testing/${{ github.sha }}/world.sql.gz.age /tmp/world.sql.gz.age
          # Decrypt backup
          echo "Decrypt backup"
          age --decrypt -i tests/keys/priv /tmp/world.sql.gz.age > /tmp/world.sql.gz
          # gunzip backup
          echo "Extracting backup"
          gunzip /tmp/world.sql.gz
          # Strip the "Dump Completed on" line
          echo "Stripping Dump Completed On line from downloaded backup..."
          sed -i '/-- Dump completed on/d' /tmp/world.sql
          # Strip the "MariaDB dump" line
          echo "Stripping MariaDB dump line from downloaded backup..."
          sed -i '/-- MariaDB dump/d' /tmp/world.sql
          # Compare the database backups, diff will exit with 1 if the files do not match causing the workflow to fail
          echo "Comparing database backup to known good database..."
          diff tests/db/world.sql /tmp/world.sql
          # Remove /tmp/world.sql and .age
          echo "Removing /tmp/world.sql and /tmp/world.sql.gz.age"
          rm /tmp/world.sql
          rm /tmp/world.sql.gz.age
      -
        name: Test AWS Compressed and Encrypted Backup with Timestamp
        run: |
          # Perform database backup
          echo "Performing database backup..."
          docker run -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY }} -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_KEY }} -e AWS_BUCKET_BACKUP_PATH="/${{ github.sha }}" --env-file tests/configs/aws.env -e BACKUP_COMPRESS=true -e AGE_PUBLIC_KEY="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCezY3II94FtFhJfC7wc7tNQkR9c+XN6AUNhR269f5xBCe0RZTAHt+jpHnc2auePvz+3G34cOTF7lLrgioff/yv+K6hMItKg0OdiqGQ5gKBwzUOom3TgZ1Cht7vnAVejsWfbd7RBTIeDYUnoNiHf9dt8CJIaLaanDnjzLOLQcf7KPlZUbk6TexC1QpL6X8ir9tl7ao8v+QSgGtigO2QwF7QdSZSd/xlv0FsQKfgD25fIQRZEvcyiUnLYAK1wmziICORnW0fp/sL84E8Pj8GvbQK6AGuZn/s27oYmIdCTrwnR68Jvn6l8ST+QrwexzRM/k0yGkRMOU9AiG0o4skEdtGF3yzmC4PSwRys/Ygdy2jmrDaSJSPxpT/gvB5I2UbX2ZCHJ6/H6jNXP71aPI5Ib/eIjWuAyYPRPDvlDOenNN9s7UTD5P1wLoyxx2pnatMHAHu89+1GfdRPglvgUH6y5DYTjc0WZKTqTbeR+DzNoBNRc8exsgo9Y1NWsJn3tyL6vI0= benmaynard@Benjamins-MacBook-Pro.local" -e BACKUP_TIMESTAMP="_%Y_%m_%d" --network backup-net kubernetes-cloud-mysql-backup:test
          # Fetch backup file from GCS
          echo "Fetching database backup..."
          DATE_STRING=$(date +_%Y_%m_%d)
          aws s3 cp s3://kubernetes-cloud-mysql-backup-github-testing/${{ github.sha }}/world$DATE_STRING.sql.gz.age /tmp/world.sql.gz.age
          # Decrypt backup
          echo "Decrypt backup"
          age --decrypt -i tests/keys/priv /tmp/world.sql.gz.age > /tmp/world.sql.gz
          # gunzip backup
          echo "Extracting backup"
          gunzip /tmp/world.sql.gz
          # Strip the "Dump Completed on" line
          echo "Stripping Dump Completed On line from downloaded backup..."
          sed -i '/-- Dump completed on/d' /tmp/world.sql
          # Strip the "MariaDB dump" line
          echo "Stripping MariaDB dump line from downloaded backup..."
          sed -i '/-- MariaDB dump/d' /tmp/world.sql
          # Compare the database backups, diff will exit with 1 if the files do not match causing the workflow to fail
          echo "Comparing database backup to known good database..."
          diff tests/db/world.sql /tmp/world.sql
          # Remove /tmp/world.sql
          echo "Removing /tmp/world.sql and /tmp/world.sql.gz.age"
          rm /tmp/world.sql
          rm /tmp/world.sql.gz.age
      -
        name: Test AWS Encrypted Backup with Timestamp
        run: |
          # Perform database backup
          echo "Performing database backup..."
          docker run -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY }} -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_KEY }} -e AWS_BUCKET_BACKUP_PATH="/${{ github.sha }}" --env-file tests/configs/aws.env -e AGE_PUBLIC_KEY="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCezY3II94FtFhJfC7wc7tNQkR9c+XN6AUNhR269f5xBCe0RZTAHt+jpHnc2auePvz+3G34cOTF7lLrgioff/yv+K6hMItKg0OdiqGQ5gKBwzUOom3TgZ1Cht7vnAVejsWfbd7RBTIeDYUnoNiHf9dt8CJIaLaanDnjzLOLQcf7KPlZUbk6TexC1QpL6X8ir9tl7ao8v+QSgGtigO2QwF7QdSZSd/xlv0FsQKfgD25fIQRZEvcyiUnLYAK1wmziICORnW0fp/sL84E8Pj8GvbQK6AGuZn/s27oYmIdCTrwnR68Jvn6l8ST+QrwexzRM/k0yGkRMOU9AiG0o4skEdtGF3yzmC4PSwRys/Ygdy2jmrDaSJSPxpT/gvB5I2UbX2ZCHJ6/H6jNXP71aPI5Ib/eIjWuAyYPRPDvlDOenNN9s7UTD5P1wLoyxx2pnatMHAHu89+1GfdRPglvgUH6y5DYTjc0WZKTqTbeR+DzNoBNRc8exsgo9Y1NWsJn3tyL6vI0= benmaynard@Benjamins-MacBook-Pro.local" -e BACKUP_TIMESTAMP="_%Y_%m_%d" --network backup-net kubernetes-cloud-mysql-backup:test
          # Fetch backup file from GCS
          echo "Fetching database backup..."
          DATE_STRING=$(date +_%Y_%m_%d)
          aws s3 cp s3://kubernetes-cloud-mysql-backup-github-testing/${{ github.sha }}/world$DATE_STRING.sql.age /tmp/world.sql.age
          # Decrypt backup
          echo "Decrypt backup"
          age --decrypt -i tests/keys/priv /tmp/world.sql.age > /tmp/world.sql
          # Strip the "Dump Completed on" line
          echo "Stripping Dump Completed On line from downloaded backup..."
          sed -i '/-- Dump completed on/d' /tmp/world.sql
          # Strip the "MariaDB dump" line
          echo "Stripping MariaDB dump line from downloaded backup..."
          sed -i '/-- MariaDB dump/d' /tmp/world.sql
          # Compare the database backups, diff will exit with 1 if the files do not match causing the workflow to fail
          echo "Comparing database backup to known good database..."
          diff tests/db/world.sql /tmp/world.sql
          # Remove /tmp/world.sql and .age
          echo "Removing /tmp/world.sql and /tmp/world.sql.age"
          rm /tmp/world.sql
          rm /tmp/world.sql.age
